#include<stdio.h>
#include<stdlib.h>
#include<string.h>

#define A 26

struct cell__{
    char *str;
    int alph[A];
    int length;
    struct cell__ *next;    //単語数がわからないのでリストで繋げるためのポインタ
} String;

int check(struct cell__ *target, struct cell__ *dict){
    int i;
    if(target->length != dict->length) return 0;    //長さが違ったら調査対象外にする
    for(i=0; i<A; i++)
        if(target->alph[i] != dict->alph[i]) return 0;  //アルファベットの個数が違ったら作れない
    return 1;   //全てのアルファベットの個数が同じならアナグラムを作ることができる
}

void makedict(struct cell__ *root, char str[]){
    struct cell__ *nood;
    int i;
    nood = malloc(sizeof(String));
    nood->length = strlen(str)+1;
    nood->str = malloc(sizeof(char)*nood->length);
    strcpy(nood->str, str);
    for(i=0; i<A; i++) nood->alph[i] = 0;
    for(i=0; i<strlen(str); i++)
        nood->alph[(int)str[i]-(int)'a']++;
    nood->next = root->next;
    root->next = nood;
}

void freenode(struct cell__ *root){
    struct cell__ *delete;
    delete = root->next;
    while(delete != root){
        root->next = delete->next;
        free(delete->str);
        free(delete);
        delete = root->next;
    }
}


int main(void){
    struct cell__ root, target;
    struct cell__ *nood;
    FILE *fp;
    fp = fopen("words.txt", "r");
    char str[100000];
    int i;

    root.str = malloc(sizeof(char));
    root.str[0] = '\n';
    for(i=0; i<A; i++) root.alph[i] = -1;
    root.length = -1;
    root.next = &root;

    while(fscanf(fp, "%s", str) != EOF) makedict(&root, str);

    scanf("%s", str);
    target.length = strlen(str)+1;
    target.str = malloc(sizeof(char)*target.length);
    for(i=0; i<A; i++) target.alph[i] = 0;
    for(i=0; i<strlen(str); i++)
        target.alph[(int)str[i]-(int)'a']++;

    nood = root.next;
    while(nood != &root){
        if(check(&target, nood)) printf("%s\n", nood->str);
        nood = nood->next;
    }

    freenode(&root);
    free(target.str);
    free(root.str);
    fclose(fp);
    return 0;
}
