#include<stdio.h>
#include<stdlib.h>
#include<string.h>

#define A 26

int score_table[A] = {1, 3, 2, 2, 1, 3, 3, 1, 1, 4, 4, 2, 2, 1, 1, 3, 4, 1, 1, 1, 2, 3, 3, 4, 3, 4};

struct cell__{
    char *str;
    int alph[A];
    int length;
    struct cell__ *next;    //単語数がわからないのでリストで繋げるためのポインタ
    int score;
} String;

int check(struct cell__ *target, struct cell__ *dict){
    int i;
    if(target->length < dict->length) return 0;
    for(i=0; i<A; i++)
        if(target->alph[i] < dict->alph[i]) return 0;
    return 1;
}

void makedict(struct cell__ *root, char str[]){
    struct cell__ *nood;
    int i;
    nood = malloc(sizeof(String));
    nood->length = strlen(str)+1;
    nood->str = malloc(sizeof(char)*nood->length);
    strcpy(nood->str, "\0");
    strcpy(nood->str, str);
    for(i=0; i<A; i++) nood->alph[i] = 0;
    nood->score = 0;
    for(i=0; i<strlen(str); i++){
        nood->alph[(int)str[i]-(int)'a']++;
        nood->score += score_table[(int)str[i]-(int)'a'];
    }
    nood->next = root->next;
    root->next = nood;
    strcpy(str, "\0");
}

void freenode(struct cell__ *root){
    struct cell__ *delete;
    delete = root->next;
    while(delete != root){
        root->next = delete->next;
        free(delete->str);
        free(delete);
        delete = root->next;
    }
}


int main(int argc, char *argv[]){
    if(argc != 3){
        printf("入力ファイルと出力ファイルの指定がされていません。\n");
        return 1;
    }
    struct cell__ root, target;
    struct cell__ *nood, *max;
    char str[100000];
    int i;
    FILE *fp, *fp2, *fp3;
    fp = fopen("words.txt", "r");
    fp2 = fopen(argv[1], "r");
    fp3 = fopen(argv[2], "w");

    root.str = malloc(sizeof(char));
    strcpy(root.str, "");
    for(i=0; i<A; i++) root.alph[i] = -1;
    root.length = -1;
    root.score = -1;
    root.next = &root;
    max = &root;

    while(fscanf(fp, "%s", str) != EOF) makedict(&root, str);

    while(fscanf(fp2, "%s\n", str) != EOF){
        target.length = strlen(str)+1;
        target.str = malloc(sizeof(char)*target.length);
        for(i=0; i<A; i++) target.alph[i] = 0;
        for(i=0; i<strlen(str); i++)
            target.alph[(int)str[i]-(int)'a']++;

        nood = root.next;
        while(nood != &root){
            if(check(&target, nood))
                if(max->score < nood->score) max = nood;
            nood = nood->next;
        }
        fprintf(fp3, "%s\n", max->str);
        free(target.str);
        max = &root;
    }

    freenode(&root);
    free(root.str);
    fclose(fp);
    fclose(fp2);
    fclose(fp3);
    return 0;
}
